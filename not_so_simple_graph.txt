#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <vector>

using namespace std;

class Graph
{
   private:
      // TODO: Graph structure that supports parallel edges and self-loops
      map<int, pair<int, int>> m;

    public:
      void insertEdge(int from, int to, int weight);  
      bool isEdge(int from, int to);  
      int sumEdge(int from, int to); 
      std::vector<int> getWeight(int from, int to); 
      std::vector<int> getAdjacent(int vertex); 
};

void Graph::insertEdge(int from, int to, int weight) 
{
   /*
        TODO: insertEdge() adds a new edge between the from 
        and to vertex.
   */
    pair<int, int> p1 = make_pair(from, to);

    // map<int, pair<int, int>>::iterator it = m.begin();
    // for(it; it != m.end(); it++){
    //     if(it->second==p1){
    //         it->first += weight;
    //     }
    // }

    m.insert({weight, p1});

}
        
bool Graph::isEdge(int from, int to) 
{
    /*
        TODO: isEdge() returns a boolean indicating true 
        if there is an edge between the from and to vertex
    */
    
    map<int, pair<int, int>>::iterator it = m.begin();
    for(it; it != m.end(); it++){
        if(it->second.first==from && it->second.second==to){
            return true;
        }
    }

    return false;
}

int Graph::sumEdge(int from, int to)
{
    /*
        TODO: sumEdge() returns the sum of weights of all edges 
        connecting the from and to vertex. Returns 0 if no edges 
        connect the two vertices.
    */
    int sum = 0;

    map<int, pair<int, int>>::iterator it = m.begin();
    for(it; it != m.end(); it++){
        if(it->second.first==from && it->second.second==to){
            sum+= it->first;
        }
    }
    return sum;
}

std::vector<int> Graph::getWeight(int from, int to)
{
    /*
        TODO: getWeight() returns a sorted vector containing all 
        weights of the edges connecting the from and to vertex
    */
    vector<int> weights;
    map<int, pair<int, int>>::iterator it = m.begin();
    for(it; it != m.end(); it++){
        if(it->second.first==from && it->second.second==to){
            weights.push_back(it->first);
        }
    }
    sort(weights.begin(),weights.end());
    return weights;
}

std::vector<int> Graph::getAdjacent(int vertex) 
{
    /*
        TODO: getAdjacent() returns a sorted vector of all vertices
        that are connected to a vertex
    */
    vector<int> weights;
    map<int, pair<int, int>>::iterator it = m.begin();
    for(it; it != m.end(); it++){
        if(it->second.first==vertex){
            weights.push_back(it->second.second);
        }
    }
    sort(weights.begin(),weights.end());
    return weights;
}


 
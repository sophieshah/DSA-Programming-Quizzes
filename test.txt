//#include "../src/interquartile_range.h"
//#include <vector>
//#define CATCH_CONFIG_MAIN
//#include "catch.hpp"
//
///*
//	To check output (At the interquartile_range directory):
//		g++ -std=c++14 -Werror -Wuninitialized -o test test-unit/test.cpp && ./test
//*/
//
//TEST_CASE("Function: IQR 1", "[given]") {
//	std::vector<int> v = {6, 6, 6, 6, 6};
//	Node* head = nullptr;
//	for(int i: v)
//		head = insertEnd(head, i);
//
//	REQUIRE(interQuartile(head) == 0.00);
//
//    while (head != nullptr)
//    {
//        Node* temp = head;
//        head = head->next;
//        delete temp;
//    }
//}
//
//TEST_CASE("Function: IQR 2", "[given]") {
//	std::vector<int> v = {-5, -4, -3, -2, -1};
//	Node* head = nullptr;
//	for(int i: v)
//		head = insertEnd(head, i);
//
//	REQUIRE(interQuartile(head) == 3.00);
//
//    while (head != nullptr)
//    {
//        Node* temp = head;
//        head = head->next;
//        delete temp;
//    }
//}
//
//TEST_CASE("Function: IQR 3", "[output_hidden]") {
//	std::vector<int> v = {-4, -2, 0, 2, 4, 6};
//	Node* head = nullptr;
//	for(int i: v)
//		head = insertEnd(head, i);
//
//	REQUIRE(interQuartile(head) == 6.00);
//
//    while (head != nullptr)
//    {
//        Node* temp = head;
//        head = head->next;
//        delete temp;
//    }
//}
//
//TEST_CASE("Function: IQR 4", "[output_hidden]") {
//	std::vector<int> v = {11111, 12578, 15398, 17576, 24340, 25500, 25500, 33468};
//	Node* head = nullptr;
//	for(int i: v)
//		head = insertEnd(head, i);
//
//	REQUIRE(interQuartile(head) == 11512.00);
//
//    while (head != nullptr)
//    {
//        Node* temp = head;
//        head = head->next;
//        delete temp;
//    }
//}
//
//TEST_CASE("Function: IQR 5", "[output_hidden]") {
//	std::vector<int> v = {0,0, 0, 21, 47, 69, 88, 12345, 54446};
//	Node* head = nullptr;
//	for(int i: v)
//		head = insertEnd(head, i);
//
//	REQUIRE(interQuartile(head) == 6216.50);
//
//    while (head != nullptr)
//    {
//        Node* temp = head;
//        head = head->next;
//        delete temp;
//    }
//}
//
